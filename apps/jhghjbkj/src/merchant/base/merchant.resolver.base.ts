/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Merchant } from "./Merchant";
import { MerchantCountArgs } from "./MerchantCountArgs";
import { MerchantFindManyArgs } from "./MerchantFindManyArgs";
import { MerchantFindUniqueArgs } from "./MerchantFindUniqueArgs";
import { CreateMerchantArgs } from "./CreateMerchantArgs";
import { UpdateMerchantArgs } from "./UpdateMerchantArgs";
import { DeleteMerchantArgs } from "./DeleteMerchantArgs";
import { MerchantService } from "../merchant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Merchant)
export class MerchantResolverBase {
  constructor(
    protected readonly service: MerchantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "read",
    possession: "any",
  })
  async _merchantsMeta(
    @graphql.Args() args: MerchantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Merchant])
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "read",
    possession: "any",
  })
  async merchants(
    @graphql.Args() args: MerchantFindManyArgs
  ): Promise<Merchant[]> {
    return this.service.merchants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Merchant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "read",
    possession: "own",
  })
  async merchant(
    @graphql.Args() args: MerchantFindUniqueArgs
  ): Promise<Merchant | null> {
    const result = await this.service.merchant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Merchant)
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "create",
    possession: "any",
  })
  async createMerchant(
    @graphql.Args() args: CreateMerchantArgs
  ): Promise<Merchant> {
    return await this.service.createMerchant({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Merchant)
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "update",
    possession: "any",
  })
  async updateMerchant(
    @graphql.Args() args: UpdateMerchantArgs
  ): Promise<Merchant | null> {
    try {
      return await this.service.updateMerchant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Merchant)
  @nestAccessControl.UseRoles({
    resource: "Merchant",
    action: "delete",
    possession: "any",
  })
  async deleteMerchant(
    @graphql.Args() args: DeleteMerchantArgs
  ): Promise<Merchant | null> {
    try {
      return await this.service.deleteMerchant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
